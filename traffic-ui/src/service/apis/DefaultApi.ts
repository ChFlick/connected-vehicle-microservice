/* tslint:disable */
/* eslint-disable */
/**
 * Traffic API
 * This API allows CRUD operations on SUMO Traffic data
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Vehicle,
    VehicleFromJSON,
    VehicleToJSON,
} from '../models';

export interface TrafficVehiclesBusesBetweenGetRequest {
    end: Date;
    start: Date;
}

export interface TrafficVehiclesBusesMeanDataBetweenGetRequest {
    end: Date;
    start: Date;
    meanBy?: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async trafficVehiclesBusesBetweenGetRaw(requestParameters: TrafficVehiclesBusesBetweenGetRequest): Promise<runtime.ApiResponse<Array<Vehicle>>> {
        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling trafficVehiclesBusesBetweenGet.');
        }

        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling trafficVehiclesBusesBetweenGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString();
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/traffic/vehicles/busesBetween`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleFromJSON));
    }

    /**
     */
    async trafficVehiclesBusesBetweenGet(requestParameters: TrafficVehiclesBusesBetweenGetRequest): Promise<Array<Vehicle>> {
        const response = await this.trafficVehiclesBusesBetweenGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trafficVehiclesBusesMeanDataBetweenGetRaw(requestParameters: TrafficVehiclesBusesMeanDataBetweenGetRequest): Promise<runtime.ApiResponse<Array<Vehicle>>> {
        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling trafficVehiclesBusesMeanDataBetweenGet.');
        }

        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling trafficVehiclesBusesMeanDataBetweenGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString();
        }

        if (requestParameters.meanBy !== undefined) {
            queryParameters['meanBy'] = requestParameters.meanBy;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/traffic/vehicles/busesMeanDataBetween`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleFromJSON));
    }

    /**
     */
    async trafficVehiclesBusesMeanDataBetweenGet(requestParameters: TrafficVehiclesBusesMeanDataBetweenGetRequest): Promise<Array<Vehicle>> {
        const response = await this.trafficVehiclesBusesMeanDataBetweenGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trafficVehiclesCarsSinceLastFiveSecondsGetRaw(): Promise<runtime.ApiResponse<Array<Vehicle>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/traffic/vehicles/carsSinceLastFiveSeconds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleFromJSON));
    }

    /**
     */
    async trafficVehiclesCarsSinceLastFiveSecondsGet(): Promise<Array<Vehicle>> {
        const response = await this.trafficVehiclesCarsSinceLastFiveSecondsGetRaw();
        return await response.value();
    }

}
